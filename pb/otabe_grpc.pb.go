// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OTabeManagerClient is the client API for OTabeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OTabeManagerClient interface {
	// user
	GetRestaurantDetails(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error)
	ListRestaurantsByOptions(ctx context.Context, in *ListRestaurantsRequest, opts ...grpc.CallOption) (*ListRestaurantsResponse, error)
	//admin
	CreateNewRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*CreateRestaurantResponse, error)
	UpdateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error)
	//auth
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type oTabeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewOTabeManagerClient(cc grpc.ClientConnInterface) OTabeManagerClient {
	return &oTabeManagerClient{cc}
}

func (c *oTabeManagerClient) GetRestaurantDetails(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error) {
	out := new(GetRestaurantResponse)
	err := c.cc.Invoke(ctx, "/v1.OTabeManager/GetRestaurantDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTabeManagerClient) ListRestaurantsByOptions(ctx context.Context, in *ListRestaurantsRequest, opts ...grpc.CallOption) (*ListRestaurantsResponse, error) {
	out := new(ListRestaurantsResponse)
	err := c.cc.Invoke(ctx, "/v1.OTabeManager/ListRestaurantsByOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTabeManagerClient) CreateNewRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*CreateRestaurantResponse, error) {
	out := new(CreateRestaurantResponse)
	err := c.cc.Invoke(ctx, "/v1.OTabeManager/CreateNewRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTabeManagerClient) UpdateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error) {
	out := new(GetRestaurantResponse)
	err := c.cc.Invoke(ctx, "/v1.OTabeManager/UpdateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTabeManagerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/v1.OTabeManager/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OTabeManagerServer is the server API for OTabeManager service.
// All implementations must embed UnimplementedOTabeManagerServer
// for forward compatibility
type OTabeManagerServer interface {
	// user
	GetRestaurantDetails(context.Context, *GetRestaurantRequest) (*GetRestaurantResponse, error)
	ListRestaurantsByOptions(context.Context, *ListRestaurantsRequest) (*ListRestaurantsResponse, error)
	//admin
	CreateNewRestaurant(context.Context, *CreateRestaurantRequest) (*CreateRestaurantResponse, error)
	UpdateRestaurant(context.Context, *CreateRestaurantRequest) (*GetRestaurantResponse, error)
	//auth
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedOTabeManagerServer()
}

// UnimplementedOTabeManagerServer must be embedded to have forward compatible implementations.
type UnimplementedOTabeManagerServer struct {
}

func (UnimplementedOTabeManagerServer) GetRestaurantDetails(context.Context, *GetRestaurantRequest) (*GetRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantDetails not implemented")
}
func (UnimplementedOTabeManagerServer) ListRestaurantsByOptions(context.Context, *ListRestaurantsRequest) (*ListRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestaurantsByOptions not implemented")
}
func (UnimplementedOTabeManagerServer) CreateNewRestaurant(context.Context, *CreateRestaurantRequest) (*CreateRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewRestaurant not implemented")
}
func (UnimplementedOTabeManagerServer) UpdateRestaurant(context.Context, *CreateRestaurantRequest) (*GetRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurant not implemented")
}
func (UnimplementedOTabeManagerServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedOTabeManagerServer) mustEmbedUnimplementedOTabeManagerServer() {}

// UnsafeOTabeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OTabeManagerServer will
// result in compilation errors.
type UnsafeOTabeManagerServer interface {
	mustEmbedUnimplementedOTabeManagerServer()
}

func RegisterOTabeManagerServer(s grpc.ServiceRegistrar, srv OTabeManagerServer) {
	s.RegisterService(&OTabeManager_ServiceDesc, srv)
}

func _OTabeManager_GetRestaurantDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTabeManagerServer).GetRestaurantDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OTabeManager/GetRestaurantDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTabeManagerServer).GetRestaurantDetails(ctx, req.(*GetRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTabeManager_ListRestaurantsByOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTabeManagerServer).ListRestaurantsByOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OTabeManager/ListRestaurantsByOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTabeManagerServer).ListRestaurantsByOptions(ctx, req.(*ListRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTabeManager_CreateNewRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTabeManagerServer).CreateNewRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OTabeManager/CreateNewRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTabeManagerServer).CreateNewRestaurant(ctx, req.(*CreateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTabeManager_UpdateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTabeManagerServer).UpdateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OTabeManager/UpdateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTabeManagerServer).UpdateRestaurant(ctx, req.(*CreateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTabeManager_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTabeManagerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OTabeManager/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTabeManagerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OTabeManager_ServiceDesc is the grpc.ServiceDesc for OTabeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OTabeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OTabeManager",
	HandlerType: (*OTabeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRestaurantDetails",
			Handler:    _OTabeManager_GetRestaurantDetails_Handler,
		},
		{
			MethodName: "ListRestaurantsByOptions",
			Handler:    _OTabeManager_ListRestaurantsByOptions_Handler,
		},
		{
			MethodName: "CreateNewRestaurant",
			Handler:    _OTabeManager_CreateNewRestaurant_Handler,
		},
		{
			MethodName: "UpdateRestaurant",
			Handler:    _OTabeManager_UpdateRestaurant_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _OTabeManager_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "otabe.proto",
}
