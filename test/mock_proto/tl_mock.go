// Code generated by MockGen. DO NOT EDIT.
// Source: otabe/v1 (interfaces: OTabeManagerClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	v1 "otabe/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOTabeManagerClient is a mock of OTabeManagerClient interface.
type MockOTabeManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockOTabeManagerClientMockRecorder
}

// MockOTabeManagerClientMockRecorder is the mock recorder for MockOTabeManagerClient.
type MockOTabeManagerClientMockRecorder struct {
	mock *MockOTabeManagerClient
}

// NewMockOTabeManagerClient creates a new mock instance.
func NewMockOTabeManagerClient(ctrl *gomock.Controller) *MockOTabeManagerClient {
	mock := &MockOTabeManagerClient{ctrl: ctrl}
	mock.recorder = &MockOTabeManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTabeManagerClient) EXPECT() *MockOTabeManagerClientMockRecorder {
	return m.recorder
}

// CreateNewRestaurant mocks base method.
func (m *MockOTabeManagerClient) CreateNewRestaurant(arg0 context.Context, arg1 *v1.CreateRestaurantRequest, arg2 ...grpc.CallOption) (*v1.CreateRestaurantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNewRestaurant", varargs...)
	ret0, _ := ret[0].(*v1.CreateRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewRestaurant indicates an expected call of CreateNewRestaurant.
func (mr *MockOTabeManagerClientMockRecorder) CreateNewRestaurant(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewRestaurant", reflect.TypeOf((*MockOTabeManagerClient)(nil).CreateNewRestaurant), varargs...)
}

// GetRestaurantDetails mocks base method.
func (m *MockOTabeManagerClient) GetRestaurantDetails(arg0 context.Context, arg1 *v1.GetRestaurantRequest, arg2 ...grpc.CallOption) (*v1.GetRestaurantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestaurantDetails", varargs...)
	ret0, _ := ret[0].(*v1.GetRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantDetails indicates an expected call of GetRestaurantDetails.
func (mr *MockOTabeManagerClientMockRecorder) GetRestaurantDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantDetails", reflect.TypeOf((*MockOTabeManagerClient)(nil).GetRestaurantDetails), varargs...)
}

// ListRestaurantsByOptions mocks base method.
func (m *MockOTabeManagerClient) ListRestaurantsByOptions(arg0 context.Context, arg1 *v1.ListRestaurantsRequest, arg2 ...grpc.CallOption) (*v1.ListRestaurantsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRestaurantsByOptions", varargs...)
	ret0, _ := ret[0].(*v1.ListRestaurantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestaurantsByOptions indicates an expected call of ListRestaurantsByOptions.
func (mr *MockOTabeManagerClientMockRecorder) ListRestaurantsByOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestaurantsByOptions", reflect.TypeOf((*MockOTabeManagerClient)(nil).ListRestaurantsByOptions), varargs...)
}

// Login mocks base method.
func (m *MockOTabeManagerClient) Login(arg0 context.Context, arg1 *v1.LoginRequest, arg2 ...grpc.CallOption) (*v1.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*v1.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockOTabeManagerClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockOTabeManagerClient)(nil).Login), varargs...)
}

// UpdateRestaurant mocks base method.
func (m *MockOTabeManagerClient) UpdateRestaurant(arg0 context.Context, arg1 *v1.CreateRestaurantRequest, arg2 ...grpc.CallOption) (*v1.GetRestaurantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRestaurant", varargs...)
	ret0, _ := ret[0].(*v1.GetRestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestaurant indicates an expected call of UpdateRestaurant.
func (mr *MockOTabeManagerClientMockRecorder) UpdateRestaurant(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestaurant", reflect.TypeOf((*MockOTabeManagerClient)(nil).UpdateRestaurant), varargs...)
}
