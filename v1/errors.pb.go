// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: v1/errors.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvalidFieldType int32

const (
	InvalidFieldType_INVALID_FIELD_TYPE_UNKNOWN                     InvalidFieldType = 0
	InvalidFieldType_INVALID_FIELD_TYPE_RESTAURANT_NAME             InvalidFieldType = 1
	InvalidFieldType_INVALID_FIELD_TYPE_ITEM_NAME                   InvalidFieldType = 2
	InvalidFieldType_INVALID_FIELD_TYPE_LONGITUDE                   InvalidFieldType = 3
	InvalidFieldType_INVALID_FIELD_TYPE_LATITUDE                    InvalidFieldType = 4
	InvalidFieldType_INVALID_FIELD_TYPE_DISTANCE                    InvalidFieldType = 5
	InvalidFieldType_INVALID_FIELD_TYPE_CONDITIONS                  InvalidFieldType = 6
	InvalidFieldType_INVALID_FIELD_TYPE_SEARCH_LOCATIONS_CONDITIONS InvalidFieldType = 7
	InvalidFieldType_INVALID_FIELD_TYPE_PAGING                      InvalidFieldType = 8
	InvalidFieldType_INVALID_FIELD_TYPE_MAX_CONTENTS_PER_PAGE       InvalidFieldType = 9
	InvalidFieldType_INVALID_FIELD_TYPE_PAGE_NUMBER                 InvalidFieldType = 10
	InvalidFieldType_INVALID_FIELD_TYPE_RESTAURANT_ID               InvalidFieldType = 11
	InvalidFieldType_INVALID_FIELD_TYPE_RESTAURANT_PARAMS           InvalidFieldType = 12
)

// Enum value maps for InvalidFieldType.
var (
	InvalidFieldType_name = map[int32]string{
		0:  "INVALID_FIELD_TYPE_UNKNOWN",
		1:  "INVALID_FIELD_TYPE_RESTAURANT_NAME",
		2:  "INVALID_FIELD_TYPE_ITEM_NAME",
		3:  "INVALID_FIELD_TYPE_LONGITUDE",
		4:  "INVALID_FIELD_TYPE_LATITUDE",
		5:  "INVALID_FIELD_TYPE_DISTANCE",
		6:  "INVALID_FIELD_TYPE_CONDITIONS",
		7:  "INVALID_FIELD_TYPE_SEARCH_LOCATIONS_CONDITIONS",
		8:  "INVALID_FIELD_TYPE_PAGING",
		9:  "INVALID_FIELD_TYPE_MAX_CONTENTS_PER_PAGE",
		10: "INVALID_FIELD_TYPE_PAGE_NUMBER",
		11: "INVALID_FIELD_TYPE_RESTAURANT_ID",
		12: "INVALID_FIELD_TYPE_RESTAURANT_PARAMS",
	}
	InvalidFieldType_value = map[string]int32{
		"INVALID_FIELD_TYPE_UNKNOWN":                     0,
		"INVALID_FIELD_TYPE_RESTAURANT_NAME":             1,
		"INVALID_FIELD_TYPE_ITEM_NAME":                   2,
		"INVALID_FIELD_TYPE_LONGITUDE":                   3,
		"INVALID_FIELD_TYPE_LATITUDE":                    4,
		"INVALID_FIELD_TYPE_DISTANCE":                    5,
		"INVALID_FIELD_TYPE_CONDITIONS":                  6,
		"INVALID_FIELD_TYPE_SEARCH_LOCATIONS_CONDITIONS": 7,
		"INVALID_FIELD_TYPE_PAGING":                      8,
		"INVALID_FIELD_TYPE_MAX_CONTENTS_PER_PAGE":       9,
		"INVALID_FIELD_TYPE_PAGE_NUMBER":                 10,
		"INVALID_FIELD_TYPE_RESTAURANT_ID":               11,
		"INVALID_FIELD_TYPE_RESTAURANT_PARAMS":           12,
	}
)

func (x InvalidFieldType) Enum() *InvalidFieldType {
	p := new(InvalidFieldType)
	*p = x
	return p
}

func (x InvalidFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvalidFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_errors_proto_enumTypes[0].Descriptor()
}

func (InvalidFieldType) Type() protoreflect.EnumType {
	return &file_v1_errors_proto_enumTypes[0]
}

func (x InvalidFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvalidFieldType.Descriptor instead.
func (InvalidFieldType) EnumDescriptor() ([]byte, []int) {
	return file_v1_errors_proto_rawDescGZIP(), []int{0}
}

// エラー種別を表現
type InvalidReasonType int32

const (
	InvalidReasonType_INVALID_REASON_TYPE_UNKNOWN InvalidReasonType = 0
	// 必須項目が指定されていないエラー
	//  "is required"
	InvalidReasonType_INVALID_REASON_TYPE_IS_REQUIRED InvalidReasonType = 1
	// 特定の閾値以下の値が指定されているエラー
	//  "must be greater than {{min_value}}"
	InvalidReasonType_INVALID_REASON_TYPE_MUST_BE_GREATER_THAN InvalidReasonType = 2
	// 指定の閾値より小さい値が指定されているエラー
	//  "must be greater than or equal to {{min_value}}"
	InvalidReasonType_INVALID_REASON_TYPE_MUST_BE_GREATER_THAN_OR_EQUAL_TO InvalidReasonType = 3
	// 特定の値でない値が指定されているエラー
	//  "must be equal to {{value}}"
	InvalidReasonType_INVALID_REASON_TYPE_MUST_BE_EQUAL_TO InvalidReasonType = 4
	// 特定の閾値以上の値が指定されているエラー
	//  "must be less than {{max_value}}"
	InvalidReasonType_INVALID_REASON_TYPE_MUST_BE_LESS_THAN InvalidReasonType = 5
	// 特定の閾値より大きい値が指定されているエラー
	//  "must be less than or equal to {{max_value}}"
	InvalidReasonType_INVALID_REASON_TYPE_MUST_BE_LESS_THAN_OR_EQUAL_TO InvalidReasonType = 6
	// 特定の日付以前の日付が指定されているエラー
	//  "must be after to {{min_date}}"
	InvalidReasonType_INVALID_REASON_TYPE_DATE_MUST_BE_AFTER InvalidReasonType = 7
	// 特定の日付より前の日付が指定されているエラー
	//  "must be after or equal to {{min_date}}"
	InvalidReasonType_INVALID_REASON_TYPE_DATE_MUST_BE_AFTER_OR_EQUAL_TO InvalidReasonType = 8
	// 同時に指定できない複数の項目が同時にしていされているエラー
	//  "must not be set together"
	InvalidReasonType_INVALID_REASON_TYPE_MUST_BE_SET_TOGETHER InvalidReasonType = 9
	// 重複して指定してはいけない値が重複して指定されているエラー
	//  "must not be duplicated"
	InvalidReasonType_INVALID_REASON_TYPE_MUST_NOT_BE_DUPLICATED InvalidReasonType = 10
	// 特定のTimeStampより前のTimeStampが指定されているエラー
	//  "must be after or equal to {{min_timestamp}}"
	InvalidReasonType_INVALID_REASON_TYPE_TIMESTAMP_MUST_BE_AFTER_OR_EQUAL_TO InvalidReasonType = 11
	InvalidReasonType_INVALID_REASON_TYPE_RESTAURANT_NOT_FOUND                InvalidReasonType = 12
)

// Enum value maps for InvalidReasonType.
var (
	InvalidReasonType_name = map[int32]string{
		0:  "INVALID_REASON_TYPE_UNKNOWN",
		1:  "INVALID_REASON_TYPE_IS_REQUIRED",
		2:  "INVALID_REASON_TYPE_MUST_BE_GREATER_THAN",
		3:  "INVALID_REASON_TYPE_MUST_BE_GREATER_THAN_OR_EQUAL_TO",
		4:  "INVALID_REASON_TYPE_MUST_BE_EQUAL_TO",
		5:  "INVALID_REASON_TYPE_MUST_BE_LESS_THAN",
		6:  "INVALID_REASON_TYPE_MUST_BE_LESS_THAN_OR_EQUAL_TO",
		7:  "INVALID_REASON_TYPE_DATE_MUST_BE_AFTER",
		8:  "INVALID_REASON_TYPE_DATE_MUST_BE_AFTER_OR_EQUAL_TO",
		9:  "INVALID_REASON_TYPE_MUST_BE_SET_TOGETHER",
		10: "INVALID_REASON_TYPE_MUST_NOT_BE_DUPLICATED",
		11: "INVALID_REASON_TYPE_TIMESTAMP_MUST_BE_AFTER_OR_EQUAL_TO",
		12: "INVALID_REASON_TYPE_RESTAURANT_NOT_FOUND",
	}
	InvalidReasonType_value = map[string]int32{
		"INVALID_REASON_TYPE_UNKNOWN":                             0,
		"INVALID_REASON_TYPE_IS_REQUIRED":                         1,
		"INVALID_REASON_TYPE_MUST_BE_GREATER_THAN":                2,
		"INVALID_REASON_TYPE_MUST_BE_GREATER_THAN_OR_EQUAL_TO":    3,
		"INVALID_REASON_TYPE_MUST_BE_EQUAL_TO":                    4,
		"INVALID_REASON_TYPE_MUST_BE_LESS_THAN":                   5,
		"INVALID_REASON_TYPE_MUST_BE_LESS_THAN_OR_EQUAL_TO":       6,
		"INVALID_REASON_TYPE_DATE_MUST_BE_AFTER":                  7,
		"INVALID_REASON_TYPE_DATE_MUST_BE_AFTER_OR_EQUAL_TO":      8,
		"INVALID_REASON_TYPE_MUST_BE_SET_TOGETHER":                9,
		"INVALID_REASON_TYPE_MUST_NOT_BE_DUPLICATED":              10,
		"INVALID_REASON_TYPE_TIMESTAMP_MUST_BE_AFTER_OR_EQUAL_TO": 11,
		"INVALID_REASON_TYPE_RESTAURANT_NOT_FOUND":                12,
	}
)

func (x InvalidReasonType) Enum() *InvalidReasonType {
	p := new(InvalidReasonType)
	*p = x
	return p
}

func (x InvalidReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvalidReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_errors_proto_enumTypes[1].Descriptor()
}

func (InvalidReasonType) Type() protoreflect.EnumType {
	return &file_v1_errors_proto_enumTypes[1]
}

func (x InvalidReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvalidReasonType.Descriptor instead.
func (InvalidReasonType) EnumDescriptor() ([]byte, []int) {
	return file_v1_errors_proto_rawDescGZIP(), []int{1}
}

type ValidationErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// validation error となった field  (複数の field を対象とする validation をかける場合は複数になる)
	Fields []*ValidationTargetField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// validation error となった理由
	Reason InvalidReasonType `protobuf:"varint,2,opt,name=reason,proto3,enum=v1.InvalidReasonType" json:"reason,omitempty"`
	// validation error の理由(文字列)に埋め込む値等
	ReasonOptions map[string]string `protobuf:"bytes,3,rep,name=reason_options,json=reasonOptions,proto3" json:"reason_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// validation error の理由(文字列)に埋め込む値等 ( 表示する言語に従った翻訳/変換が必要 )
	//  value としては "recognized_at_to" のようなキーが設定される
	ReasonLocalizedOptions map[string]string `protobuf:"bytes,4,rep,name=reason_localized_options,json=reasonLocalizedOptions,proto3" json:"reason_localized_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 任意の文字列, 開発者が読んでエラー内容を理解できる文字列であることが望ましい。
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ValidationErrorDetails) Reset() {
	*x = ValidationErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrorDetails) ProtoMessage() {}

func (x *ValidationErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_v1_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrorDetails.ProtoReflect.Descriptor instead.
func (*ValidationErrorDetails) Descriptor() ([]byte, []int) {
	return file_v1_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ValidationErrorDetails) GetFields() []*ValidationTargetField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ValidationErrorDetails) GetReason() InvalidReasonType {
	if x != nil {
		return x.Reason
	}
	return InvalidReasonType_INVALID_REASON_TYPE_UNKNOWN
}

func (x *ValidationErrorDetails) GetReasonOptions() map[string]string {
	if x != nil {
		return x.ReasonOptions
	}
	return nil
}

func (x *ValidationErrorDetails) GetReasonLocalizedOptions() map[string]string {
	if x != nil {
		return x.ReasonLocalizedOptions
	}
	return nil
}

func (x *ValidationErrorDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ValidationTargetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  validation error となった field の種別
	Field InvalidFieldType `protobuf:"varint,1,opt,name=field,proto3,enum=v1.InvalidFieldType" json:"field,omitempty"`
	// validation error となった field がどの位置 (階層構造のどの階層) か
	FieldLocation []*InvalidFieldLocation `protobuf:"bytes,2,rep,name=field_location,json=fieldLocation,proto3" json:"field_location,omitempty"`
}

func (x *ValidationTargetField) Reset() {
	*x = ValidationTargetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_errors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationTargetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationTargetField) ProtoMessage() {}

func (x *ValidationTargetField) ProtoReflect() protoreflect.Message {
	mi := &file_v1_errors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationTargetField.ProtoReflect.Descriptor instead.
func (*ValidationTargetField) Descriptor() ([]byte, []int) {
	return file_v1_errors_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationTargetField) GetField() InvalidFieldType {
	if x != nil {
		return x.Field
	}
	return InvalidFieldType_INVALID_FIELD_TYPE_UNKNOWN
}

func (x *ValidationTargetField) GetFieldLocation() []*InvalidFieldLocation {
	if x != nil {
		return x.FieldLocation
	}
	return nil
}

// validation error となった field の位置を表現
type InvalidFieldLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field の種別
	Field InvalidFieldType `protobuf:"varint,1,opt,name=field,proto3,enum=v1.InvalidFieldType" json:"field,omitempty"`
	// field が array の場合、その index
	ArrayIndex *uint32 `protobuf:"varint,2,opt,name=array_index,json=arrayIndex,proto3,oneof" json:"array_index,omitempty"`
	// field が map の場合、その key
	MapKey *string `protobuf:"bytes,3,opt,name=map_key,json=mapKey,proto3,oneof" json:"map_key,omitempty"`
}

func (x *InvalidFieldLocation) Reset() {
	*x = InvalidFieldLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_errors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidFieldLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidFieldLocation) ProtoMessage() {}

func (x *InvalidFieldLocation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_errors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidFieldLocation.ProtoReflect.Descriptor instead.
func (*InvalidFieldLocation) Descriptor() ([]byte, []int) {
	return file_v1_errors_proto_rawDescGZIP(), []int{2}
}

func (x *InvalidFieldLocation) GetField() InvalidFieldType {
	if x != nil {
		return x.Field
	}
	return InvalidFieldType_INVALID_FIELD_TYPE_UNKNOWN
}

func (x *InvalidFieldLocation) GetArrayIndex() uint32 {
	if x != nil && x.ArrayIndex != nil {
		return *x.ArrayIndex
	}
	return 0
}

func (x *InvalidFieldLocation) GetMapKey() string {
	if x != nil && x.MapKey != nil {
		return *x.MapKey
	}
	return ""
}

var File_v1_errors_proto protoreflect.FileDescriptor

var file_v1_errors_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x76, 0x31, 0x22, 0xf1, 0x03, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x16, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x0a, 0x12,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49,
	0x0a, 0x1b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x3f, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa2, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d,
	0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x2a, 0xf8, 0x03, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x55, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x49,
	0x54, 0x55, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x54,
	0x49, 0x54, 0x55, 0x44, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x07, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x2c,
	0x0a, 0x28, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0a,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x55, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x55, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x0c,
	0x2a, 0xfa, 0x04, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f,
	0x54, 0x4f, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54,
	0x5f, 0x42, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x04, 0x12, 0x29,
	0x0a, 0x25, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x06,
	0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x53,
	0x54, 0x5f, 0x42, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x36, 0x0a, 0x32,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45,
	0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f,
	0x54, 0x4f, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54,
	0x5f, 0x42, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x47, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x3b, 0x0a, 0x37, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x0b, 0x12,
	0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x55, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0c, 0x42, 0x05, 0x5a,
	0x03, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_errors_proto_rawDescOnce sync.Once
	file_v1_errors_proto_rawDescData = file_v1_errors_proto_rawDesc
)

func file_v1_errors_proto_rawDescGZIP() []byte {
	file_v1_errors_proto_rawDescOnce.Do(func() {
		file_v1_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_errors_proto_rawDescData)
	})
	return file_v1_errors_proto_rawDescData
}

var file_v1_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_v1_errors_proto_goTypes = []interface{}{
	(InvalidFieldType)(0),          // 0: v1.InvalidFieldType
	(InvalidReasonType)(0),         // 1: v1.InvalidReasonType
	(*ValidationErrorDetails)(nil), // 2: v1.ValidationErrorDetails
	(*ValidationTargetField)(nil),  // 3: v1.ValidationTargetField
	(*InvalidFieldLocation)(nil),   // 4: v1.InvalidFieldLocation
	nil,                            // 5: v1.ValidationErrorDetails.ReasonOptionsEntry
	nil,                            // 6: v1.ValidationErrorDetails.ReasonLocalizedOptionsEntry
}
var file_v1_errors_proto_depIdxs = []int32{
	3, // 0: v1.ValidationErrorDetails.fields:type_name -> v1.ValidationTargetField
	1, // 1: v1.ValidationErrorDetails.reason:type_name -> v1.InvalidReasonType
	5, // 2: v1.ValidationErrorDetails.reason_options:type_name -> v1.ValidationErrorDetails.ReasonOptionsEntry
	6, // 3: v1.ValidationErrorDetails.reason_localized_options:type_name -> v1.ValidationErrorDetails.ReasonLocalizedOptionsEntry
	0, // 4: v1.ValidationTargetField.field:type_name -> v1.InvalidFieldType
	4, // 5: v1.ValidationTargetField.field_location:type_name -> v1.InvalidFieldLocation
	0, // 6: v1.InvalidFieldLocation.field:type_name -> v1.InvalidFieldType
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_v1_errors_proto_init() }
func file_v1_errors_proto_init() {
	if File_v1_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_errors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationTargetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_errors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidFieldLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_errors_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_errors_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_errors_proto_goTypes,
		DependencyIndexes: file_v1_errors_proto_depIdxs,
		EnumInfos:         file_v1_errors_proto_enumTypes,
		MessageInfos:      file_v1_errors_proto_msgTypes,
	}.Build()
	File_v1_errors_proto = out.File
	file_v1_errors_proto_rawDesc = nil
	file_v1_errors_proto_goTypes = nil
	file_v1_errors_proto_depIdxs = nil
}
